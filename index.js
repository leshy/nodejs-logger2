// Generated by CoffeeScript 1.7.1
(function() {
  var Backbone, Console, Logger, Udp, UdpGun, colors, fs, h, os, settings, subscriptionMan, _,
    __slice = [].slice;

  _ = require('underscore');

  Backbone = require('backbone4000');

  h = require('helpers');

  subscriptionMan = require('subscriptionman2');

  colors = require('colors');

  UdpGun = require('udp-client');

  os = require('os');

  fs = require('fs');

  settings = {
    logstash: {
      host: 'localhost',
      port: "6000",
      extendPacket: {
        type: 'log',
        host: os.hostname()
      }
    }
  };

  Logger = exports.Logger = subscriptionMan.basic.extend4000({
    initialize: function(settings) {
      if (settings == null) {
        settings = {};
      }
      this.settings = _.extend({}, settings);
      this.context = this.parseContext(this.settings, this.settings.context || {});
      this.depth = this.settings.depth || 1;
      this.outputs = new Backbone.Collection();
      if (this.settings.outputs) {
        _.map(this.settings.outputs, (function(_this) {
          return function(value, name) {
            return _this.outputs.push(new exports[name](value));
          };
        })(this));
      } else if (this.depth === 1) {
        this.outputs.push(new Console());
      }
      return this.subscribe(true, (function(_this) {
        return function(event) {
          _this.outputs.each(function(output) {
            return output.log(event);
          });
          if (_this.parent) {
            return _this.parent.event(event);
          }
        };
      })(this));
    },
    child: function(settings) {
      if (settings == null) {
        settings = {};
      }
      settings = _.extend({
        parent: this,
        outputs: {},
        depth: this.depth + 1
      }, settings);
      return new Logger(settings);
    },
    parseContext: function() {
      var context, contexts, data, tags;
      contexts = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      contexts = _.map(_.flatten(contexts), function(context) {
        if (context.logContext) {
          return context.logContext();
        } else {
          return context;
        }
      });
      context = {};
      tags = _.reduce(contexts, (function(all, context) {
        if (!context.tags) {
          return all;
        } else {
          return _.extend(all, h.makeDict(context.tags));
        }
      }), {});
      if (!_.isEmpty(tags)) {
        context.tags = tags;
      }
      data = _.reduce(contexts, (function(all, context) {
        if (!context.data) {
          return all;
        } else {
          return _.extend(all, context.data);
        }
      }), {});
      if (!_.isEmpty(data)) {
        context.data = data;
      }
      return context;
    },
    log: function() {
      var context, contexts, logEntry, msg;
      msg = arguments[0], contexts = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (msg == null) {
        msg = "";
      }
      if (_.every(contexts.slice(1), function(context) {
        return context.constructor === String;
      })) {
        contexts = {
          data: contexts.shift(),
          tags: contexts
        };
      }
      context = this.parseContext(this.context, contexts);
      logEntry = _.extend({}, context);
      return this.event(logEntry);
    }
  });

  Console = exports.Console = Backbone.Model.extend4000({
    name: 'console',
    initialize: function() {
      return this.startTime = process.hrtime()[0];
    },
    parseTags: function(tags) {
      return _.map(tags, function(tag) {
        if (tag === 'fail' || tag === 'error') {
          return colors.red(tag);
        }
        if (tag === 'pass' || tag === 'ok') {
          return colors.green(tag);
        }
        return colors.yellow(tag);
      });
    },
    log: function(logEvent) {
      var hrtime, tags;
      hrtime = process.hrtime();
      tags = this.parseTags(logEvent.tags);
      return console.log(colors.grey(new Date()) + "\t" + colors.green("" + (hrtime[0] - this.startTime) + "." + hrtime[1]) + "\t " + tags.join(', ') + "\tâ‹…\t" + logEvent.message);
    }
  });

  Udp = exports.Udp = Backbone.Model.extend4000({
    name: 'udp',
    initialize: function(settings) {
      this.settings = settings != null ? settings : {
        host: 'localhost',
        port: 6000
      };
      this.gun = new UdpGun(this.settings.port, this.settings.host);
      return this.hostname = os.hostname();
    },
    log: function(logEvent) {
      return this.gun.send(new Buffer(JSON.stringify(_.extend({
        type: 'nodelogger',
        host: this.hostname
      }, this.settings.extendPacket || {}, logEvent))));
    }
  });

}).call(this);
